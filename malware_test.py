# %load malware_test.py
"""
this file extracts the required information of a given file using the library PE 

"""

import pefile
import os
import array
import math
import pickle
import joblib
import sys
import argparse
import hashlib
import requests


def get_entropy(data):
    if len(data) == 0:
	    return 0.0
    occurences = array.array('L', [0]*256)
    for x in data:
  	    occurences[x if isinstance(x, int) else ord(x)] += 1

    entropy = 0
    for x in occurences:
        if x:
            p_x = float(x) / len(data)
            entropy -= p_x*math.log(p_x, 2)

    return entropy


def get_resources(pe):
    """Extract resources :
    [entropy, size]"""
    resources = []
    if hasattr(pe, 'DIRECTORY_ENTRY_RESOURCE'):
        try:
            for resource_type in pe.DIRECTORY_ENTRY_RESOURCE.entries:
                if hasattr(resource_type, 'directory'):
                    for resource_id in resource_type.directory.entries:
                        if hasattr(resource_id, 'directory'):
                            for resource_lang in resource_id.directory.entries:
                                data = pe.get_data(resource_lang.data.struct.OffsetToData, resource_lang.data.struct.Size)
                                size = resource_lang.data.struct.Size
                                entropy = get_entropy(data)

                                resources.append([entropy, size])
        except Exception as e:
            return resources
    return resources

def get_version_info(pe):
    """Return version infos"""
    res = {}
    for fileinfo in pe.FileInfo:
        if fileinfo.Key == 'StringFileInfo':
            for st in fileinfo.StringTable:
                for entry in st.entries.items():
                    res[entry[0]] = entry[1]
        if fileinfo.Key == 'VarFileInfo':
            for var in fileinfo.Var:
                res[var.entry.items()[0][0]] = var.entry.items()[0][1]
    if hasattr(pe, 'VS_FIXEDFILEINFO'):
          res['flags'] = pe.VS_FIXEDFILEINFO.FileFlags
          res['os'] = pe.VS_FIXEDFILEINFO.FileOS
          res['type'] = pe.VS_FIXEDFILEINFO.FileType
          res['file_version'] = pe.VS_FIXEDFILEINFO.FileVersionLS
          res['product_version'] = pe.VS_FIXEDFILEINFO.ProductVersionLS
          res['signature'] = pe.VS_FIXEDFILEINFO.Signature
          res['struct_version'] = pe.VS_FIXEDFILEINFO.StrucVersion
    return res

#extract the info for a given file
def extract_infos(fpath):
    res = {}
    pe = pefile.PE(fpath)
    res['Machine'] = pe.FILE_HEADER.Machine
    res['SizeOfOptionalHeader'] = pe.FILE_HEADER.SizeOfOptionalHeader
    res['Characteristics'] = pe.FILE_HEADER.Characteristics
    res['MajorLinkerVersion'] = pe.OPTIONAL_HEADER.MajorLinkerVersion
    res['MinorLinkerVersion'] = pe.OPTIONAL_HEADER.MinorLinkerVersion
    res['SizeOfCode'] = pe.OPTIONAL_HEADER.SizeOfCode
    res['SizeOfInitializedData'] = pe.OPTIONAL_HEADER.SizeOfInitializedData
    res['SizeOfUninitializedData'] = pe.OPTIONAL_HEADER.SizeOfUninitializedData
    res['AddressOfEntryPoint'] = pe.OPTIONAL_HEADER.AddressOfEntryPoint
    res['BaseOfCode'] = pe.OPTIONAL_HEADER.BaseOfCode
    try:
        res['BaseOfData'] = pe.OPTIONAL_HEADER.BaseOfData
    except AttributeError:
        res['BaseOfData'] = 0
    res['ImageBase'] = pe.OPTIONAL_HEADER.ImageBase
    res['SectionAlignment'] = pe.OPTIONAL_HEADER.SectionAlignment
    res['FileAlignment'] = pe.OPTIONAL_HEADER.FileAlignment
    res['MajorOperatingSystemVersion'] = pe.OPTIONAL_HEADER.MajorOperatingSystemVersion
    res['MinorOperatingSystemVersion'] = pe.OPTIONAL_HEADER.MinorOperatingSystemVersion
    res['MajorImageVersion'] = pe.OPTIONAL_HEADER.MajorImageVersion
    res['MinorImageVersion'] = pe.OPTIONAL_HEADER.MinorImageVersion
    res['MajorSubsystemVersion'] = pe.OPTIONAL_HEADER.MajorSubsystemVersion
    res['MinorSubsystemVersion'] = pe.OPTIONAL_HEADER.MinorSubsystemVersion
    res['SizeOfImage'] = pe.OPTIONAL_HEADER.SizeOfImage
    res['SizeOfHeaders'] = pe.OPTIONAL_HEADER.SizeOfHeaders
    res['CheckSum'] = pe.OPTIONAL_HEADER.CheckSum
    res['Subsystem'] = pe.OPTIONAL_HEADER.Subsystem
    res['DllCharacteristics'] = pe.OPTIONAL_HEADER.DllCharacteristics
    res['SizeOfStackReserve'] = pe.OPTIONAL_HEADER.SizeOfStackReserve
    res['SizeOfStackCommit'] = pe.OPTIONAL_HEADER.SizeOfStackCommit
    res['SizeOfHeapReserve'] = pe.OPTIONAL_HEADER.SizeOfHeapReserve
    res['SizeOfHeapCommit'] = pe.OPTIONAL_HEADER.SizeOfHeapCommit
    res['LoaderFlags'] = pe.OPTIONAL_HEADER.LoaderFlags
    res['NumberOfRvaAndSizes'] = pe.OPTIONAL_HEADER.NumberOfRvaAndSizes

    # Sections
    # res['SectionsNb'] = len(pe.sections)
    # entropy = map(lambda x:x.get_entropy(), pe.sections)
    # # res['SectionsMeanEntropy'] = sum(entropy)/float(len(entropy))
    # if len(entropy) > 0:
    #     res['SectionsMeanEntropy'] = sum(entropy) / float(len(entropy))
    # else:
    # # Handle the case where the list is empty, e.g., set a default value
    #     res['SectionsMeanEntropy'] = 0.0 
    res['SectionsNb'] = len(pe.sections)
    entropy = map(lambda x: x.get_entropy(), pe.sections)

    # Convert the map object to a list
    entropy_list = list(entropy)

    if len(entropy_list) > 0:
        res['SectionsMeanEntropy'] = sum(entropy_list) / float(len(entropy_list))
    else:
        # Handle the case where the list is empty, e.g., set a default value
        res['SectionsMeanEntropy'] = 0.0

    # res['SectionsMinEntropy'] = min(entropy)
    res['SectionsNb'] = len(pe.sections)
    entropy = map(lambda x: x.get_entropy(), pe.sections)

    # Convert the map object to a list
    entropy_list = list(entropy)

    if len(entropy_list) > 0:
        res['SectionsMinEntropy'] = min(entropy_list)
    else:
        # Handle the case where the list is empty, e.g., set a default value
        res['SectionsMinEntropy'] = 0.0
    # res['SectionsMaxEntropy'] = max(entropy)
    res['SectionsNb'] = len(pe.sections)
    entropy = map(lambda x: x.get_entropy(), pe.sections)

    # Convert the map object to a list
    entropy_list = list(entropy)

    if len(entropy_list) > 0:
        res['SectionsMaxEntropy'] = max(entropy_list)
    else:
        # Handle the case where the list is empty, e.g., set a default value
        res['SectionsMaxEntropy'] = 0.0
    raw_sizes = map(lambda x: x.SizeOfRawData, pe.sections)
    virtual_sizes = map(lambda x: x.Misc_VirtualSize, pe.sections)

    raw_sizes_list = list(raw_sizes)
    virtual_sizes_list = list(virtual_sizes)

    if len(raw_sizes_list) > 0:
        res['SectionsMeanRawsize'] = sum(raw_sizes_list) / float(len(raw_sizes_list))
        res['SectionsMinRawsize'] = min(raw_sizes_list)
        res['SectionsMaxRawsize'] = max(raw_sizes_list)
    else:
        # Handle the case where raw_sizes_list is empty
        res['SectionsMeanRawsize'] = 0.0
        res['SectionsMinRawsize'] = 0.0
        res['SectionsMaxRawsize'] = 0.0

    if len(virtual_sizes_list) > 0:
        res['SectionsMeanVirtualsize'] = sum(virtual_sizes_list) / float(len(virtual_sizes_list))
        res['SectionsMinVirtualsize'] = min(virtual_sizes_list)
        res['SectionMaxVirtualsize'] = max(virtual_sizes_list)
    else:
        # Handle the case where virtual_sizes_list is empty
        res['SectionsMeanVirtualsize'] = 0.0
        res['SectionsMinVirtualsize'] = 0.0
        res['SectionMaxVirtualsize'] = 0.0


    #Imports
    try:
        res['ImportsNbDLL'] = len(pe.DIRECTORY_ENTRY_IMPORT)
        imports = sum([x.imports for x in pe.DIRECTORY_ENTRY_IMPORT], [])
        filtered_imports = list(filter(lambda x: x.name is None, imports))
        res['ImportsNb'] = len(imports)
        res['ImportsNbOrdinal'] = len(filtered_imports)
    except AttributeError:
        res['ImportsNbDLL'] = 0
        res['ImportsNb'] = 0
        res['ImportsNbOrdinal'] = 0

    #Exports
    try:
        res['ExportNb'] = len(pe.DIRECTORY_ENTRY_EXPORT.symbols)
    except AttributeError:
        # No export
        res['ExportNb'] = 0

        # Resources
    resources = get_resources(pe)
    res['ResourcesNb'] = len(resources)

    if len(resources) > 0:
        entropy = list(map(lambda x: x[0], resources))
        res['ResourcesMeanEntropy'] = sum(entropy) / float(len(entropy))
        res['ResourcesMinEntropy'] = min(entropy)
        res['ResourcesMaxEntropy'] = max(entropy)

        sizes = list(map(lambda x: x[1], resources))
        res['ResourcesMeanSize'] = sum(sizes) / float(len(sizes))
        res['ResourcesMinSize'] = min(sizes)
        res['ResourcesMaxSize'] = max(sizes)
    else:
        res['ResourcesMeanEntropy'] = 0
        res['ResourcesMinEntropy'] = 0
        res['ResourcesMaxEntropy'] = 0
        res['ResourcesMeanSize'] = 0
        res['ResourcesMinSize'] = 0
        res['ResourcesMaxSize'] = 0


    # Load configuration size
    try:
        res['LoadConfigurationSize'] = pe.DIRECTORY_ENTRY_LOAD_CONFIG.struct.Size
    except AttributeError:
        res['LoadConfigurationSize'] = 0


    # Version configuration size
    try:
        version_infos = get_version_info(pe)
        res['VersionInformationSize'] = len(version_infos.keys())
    except AttributeError:
        res['VersionInformationSize'] = 0
    return res

def calculate_file_hash(file_name,hash_algorithm='sha256'):
    hash_obj = hashlib.new(hash_algorithm)

    with open(file_name, 'rb') as file:
        while chunk := file.read(8192):
            hash_obj.update(chunk)
    
    file_hash = hash_obj.hexdigest()
    return file_hash

if __name__ == '__main__':
	
   

    # Load the classifier
    clf = joblib.load('classifier/classifier.pkl')

    # Load the features
    with open('classifier/features.pkl', 'rb') as file:
        features = pickle.load(file)
        # print(features)

#     # Extract information from the file specified in the command line argument
    data = extract_infos(sys.argv[1])

    # Verify the content of 'data' and 'features'
    print('Data:', data)
    print('Features:', features)

    # Check if any features are missing in 'data'
    missing_features = set(features) - set(data.keys())
    if missing_features:
        print(f"Missing features in 'data': {missing_features}")
    else:
        # Map the features to their corresponding values
        pe_features = [data[x] for x in features]

        # Make a prediction using the classifier
        res = clf.predict([pe_features])[0]

        # Print the result
        print(f'The file {os.path.basename(sys.argv[1])} is {"malicious" if res else "legitimate"}')

        #generate hash value
        file_name = os.path.basename(sys.argv[1])
        print("=-=-=-",file_name)
        fn=r"C:\Users\acer\Downloads/"+file_name
        hash_value_ = calculate_file_hash(fn)

        print(f"SHA-256 hash value of '{file_name}' : {hash_value_}" )

        url = "https://www.virustotal.com/api/v3/files/"+hash_value_+"/behaviours"
        headers = {    "accept": "application/json",   
                       "x-apikey": "api key"}
        response = requests.get(url, headers=headers)
        print(response.text)

        